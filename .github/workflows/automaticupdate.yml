name: Journals

on:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        default: false
      environment:
        type: choice
        options: [development, production]
        default: 'development'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: List directory structure (Debug)
      run: ls -R

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pdf-renamer==1.1

    - name: Run Python scripts
      run: |
        set -e
        echo "Listing available Python scripts:"
        ls -la code/*.py || echo "No Python scripts found in code/ directory"
        
        echo "Python version:"
        python --version
        
        echo "Current working directory:"
        pwd
        
        if [ -d "code" ] && ls code/*.py 1> /dev/null 2>&1; then
          for file in code/*.py; do
            echo "====== Running $file ======"
            python "$file" || echo "Warning: Script $file exited with code $?"
          done
        else
          echo "No Python scripts found in the code/ directory or directory doesn't exist"
          ls -la
        fi
      shell: bash
      continue-on-error: true

    - name: Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Actualizar el branch para incorporar cambios remotos
        git pull --rebase origin ${{ github.ref }} || true
        
        git add .
        git diff --quiet && git diff --staged --quiet || (
          git commit -m "Auto update: ${{ steps.timestamp.outputs.timestamp }}

          Environment: ${{ github.event.inputs.environment }}
          Triggered by: ${{ github.event_name }}"
          
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
        )
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Status check
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ Workflow completed successfully"
        else
          echo "❌ Workflow failed"
          exit 1
        fi